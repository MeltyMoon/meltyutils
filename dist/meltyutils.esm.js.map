{"version":3,"file":"meltyutils.esm.js","sources":["../src/utils/array.js","../src/utils/regexp.js","../src/utils/boolean.js","../src/utils/date.js","../src/utils/number.js","../src/utils/object.js","../src/utils/string.js","../src/utils/document.js","../src/index.esm.js"],"sourcesContent":["/**\n * @class ArrayUtils\n * @classdesc Various array utilities.\n */\nclass ArrayUtils {\n\t/**\n\t * Groups items in an array in groups of a specified size.\n\t * \n\t * Example: group([0, 0, 0, 0, 0, 0], 2) => [[0, 0], [0, 0], [0, 0]].\n\t * @param {Array.<*>} array \n\t * @param {number} groupSize The size of the groups. \n\t * @returns {Array.<Array.<*>>}\n\t * @memberof ArrayUtils\n\t */\n\tstatic group(array, groupSize) {\n\t\tif (!groupSize) {\n\t\t\tthrow new ReferenceError(\"Must provide a group size.\");\n\t\t}\n\n\t\tlet groups = [];\n\t\tfor (const item of array) {\n\t\t\tif (groups[groups.length - 1].length >= groupSize) {\n\t\t\t\tgroups.push([]);\n\t\t\t}\n\t\t\tgroups[groups.length - 1].push(item); \n\t\t}\n\n\t\treturn groups;\n\t}\n\n\t/**\n\t * Groups an array by callback checks.\n\t * \n\t * If an item falls under 2 groups, it will go into the group that comes first.\n\t * @param {Array.<*>} array \n\t * @param {Array.<ItemCallback>} groups \n\t * @memberof ArrayUtils\n\t */\n\tstatic groupBy(array, groups) {\n\t\tlet results = [];\n\t\t// eslint-disable-next-line no-unused-vars\n\t\tfor (const index of Object.keys(groups)) {\n\t\t\tresults[index] = [];\n\t\t}\n\n\t\tfor (const item of array) {\n\t\t\tlet grouped = false;\n\t\t\tfor (const [index, group] of Object.entries(groups)) {\n\t\t\t\tif (!grouped) {\n\t\t\t\t\tif (group(item) === true) {\n\t\t\t\t\t\tresults[index].push(item);\n\t\t\t\t\t\tgrouped = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Maps an array by the property of each item.\n\t * @param {Array.<*>} array\n\t * @param {string|number} property\n\t * @returns {Array.<*>}\n\t * @memberof ArrayUtils\n\t */\n\tstatic mapProperty(array, property) {\n\t\treturn array.map(item => item[property]);\n\t}\n\n\t/**\n\t * Gets the last index of an array.\n\t * @param {Array.<*>} array \n\t * @returns {number}\n\t * @memberof ArrayUtils\n\t */\n\tstatic lastIndex(array) {\n\t\treturn array.length - 1;\n\t}\n}\n\nexport default ArrayUtils;","const isBooleanString = /^(t(rue)?|f(alse)?|y(es)?|n(o)?|0|1)$/i,\n\tbooleanStringIsTrue = /^(t(rue)?|y(es)?|1)$/i,\n\tbooleanStringIsFalse = /^(f(alse)?|n(o)?|0)$/i,\n\tsentenceSplitString = /\\.(?=(\\s|$))/g;\n\nexport {\n\tisBooleanString,\n\tbooleanStringIsFalse,\n\tbooleanStringIsTrue,\n\tsentenceSplitString\n}\n\n/**\n * @class RegExpUtils\n * @classdesc Various regular expression utilities.\n */\nclass RegExpUtils {\n\t\n}\n\nexport default RegExpUtils;","import { isBooleanString, booleanStringIsTrue, booleanStringIsFalse } from \"./regexp\";\n/**\n * @typedef {boolean|string|0|1} BooleanResolvable\n */\n\n/**\n * @class BooleanUtils\n * @classdesc Various boolean utilities.\n */\nexport default class BooleanUtils {\n\t/**\n\t * Checks if the provided thing is parsable as boolean.\n\t *\n\t * @static\n\t * @param {BooleanResolvable} resolvable \n\t * @return {boolean}\n\t * @memberof BooleanUtils\n\t */\n\tstatic is(resolvable) {\n\t\tswitch (typeof resolvable) {\n\t\t\tdefault:\n\t\t\t\treturn false;\n\n\t\t\tcase \"boolean\":\n\t\t\t\treturn true;\n\n\t\t\tcase \"string\":\n\t\t\t\treturn isBooleanString.test(resolvable);\n\n\t\t\tcase \"number\":\n\t\t\t\tif ([0,1].includes( resolvable)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Parses a resolvable boolean.\n\t * Returns null if it is not a boolean.\n\t *\n\t * @param {BooleanResolvable} resolvable \n\t * @return {boolean|null}\n\t * @memberof BooleanUtils\n\t */\n\tstatic parse(resolvable) {\n\t\tswitch (resolvable) {\n\t\t\tcase 0:\n\t\t\t\treturn false;\n\t\t\tcase 1:\n\t\t\t\treturn true;\n\t\t}\n\n\t\tswitch (typeof resolvable) {\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t\tcase \"boolean\":\n\t\t\t\treturn resolvable;\n\t\t\tcase \"string\":\n\t\t\t\tif (isBooleanString.test(resolvable)) {\n\t\t\t\t\treturn this.isTrue(resolvable);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if a resolvable boolean is true.\n\t *\n\t * @static\n\t * @param {BooleanResolvable} resolvable \n\t * @return {boolean}\n\t * @memberof BooleanUtils\n\t */\n\tstatic isTrue(resolvable) {\n\t\tswitch (typeof resolvable) {\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t\tcase \"boolean\":\n\t\t\t\treturn resolvable;\n\t\t\tcase \"string\":\n\t\t\t\treturn booleanStringIsTrue.test(resolvable);\n\t\t\tcase \"number\":\n\t\t\t\treturn resolvable === 1;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if a resolvable boolean is false.\n\t *\n\t * @static\n\t * @param {BooleanResolvable} resolvable \n\t * @return {boolean}\n\t * @memberof BooleanUtils\n\t */\n\tstatic isFalse(resolvable) {\n\t\tswitch (typeof resolvable) {\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t\tcase \"boolean\":\n\t\t\t\treturn !resolvable;\n\t\t\tcase \"string\":\n\t\t\t\treturn booleanStringIsFalse.test(resolvable);\n\t\t\tcase \"number\": \n\t\t\t\treturn resolvable === 0;\n\t\t}\n\t}\n}","const timeMs = [1e3, 6e4, 36e5, 864e5, 2628e6, 31536e6];\n/**\n * @typedef {Date|number} DateResolvable\n */\n\n/**\n * @class DateUtils\n * @classdesc Various date utilities.\n */\nclass DateUtils {\n\t/**\n\t * Gets the difference between two dates. (in milliseconds) \n\t * @param {DateResolvable} date1 The first date. \n\t * @param {?DateResolvable} date2 The second date.\n\t * \n\t * Defaults to the current date if not provided.\n\t * @returns {number}\n\t * @memberof DateUtils\n\t */\n\tstatic difference(date1, date2 = null) {\n\t\tif (date2 === null) {\n\t\t\tdate1 = date2;\n\t\t\tdate2 = Date.now();\n\t\t}\n\t\t\n\t\tif (date1 instanceof Date) {\n\t\t\tdate1 = date1.valueOf();\n\t\t}\n\n\t\tif (date2 instanceof Date) {\n\t\t\tdate2 = date2.valueOf();\n\t\t}\n\n\t\treturn date1 - date2;\n\t}\n\n\t/**\n\t * Gets the date from the provided relative string.\n\t * @param {string} string \n\t * @returns {number}\n\t * @memberof DateUtils\n\t */\n\tstatic parseRelativeString(string) {\n\t\tconst yearMatches = /[0-9]+(y|ear(s)?)/gi.exec(string),\n\t\t\tmonthMatches = /[0-9]+(M|month(s)?)/g.exec(string),\n\t\t\tdayMatches = /[0-9]+(d(ay(s)?)?)/gi.exec(string),\n\t\t\thourMatches = /[0-9]+(h(our(s)?)?)/gi.exec(string),\n\t\t\tminuteMatches = /[0-9]+(m(inute(s)?)?)/g.exec(string),\n\t\t\tsecondMatches = /[0-9]+(s(econd(s)?)?)/gi.exec(string);\n\n\t\tlet relative = 0, value;\n\t\tfor (const [index, matches] of Object.entries([secondMatches, minuteMatches, hourMatches, dayMatches, monthMatches, yearMatches])) {\n\t\t\tif ((matches?.length || 0) > 0) {\n\t\t\t\tfor (const match of matches) {\n\t\t\t\t\tvalue = parseInt(match);\n\t\t\t\t\tif (!isNaN(value)) {\n\t\t\t\t\t\trelative += value * timeMs[index];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Date.now() + relative;\n\t}\n\n\n\t/**\n\t * Checks if the resolvable is a date.\n\t * @param {DateResolvable} resolvable\n\t * @returns {boolean} \n\t * @memberof DateUtils\n\t */\n\tstatic isDate(resolvable) {\n\t\treturn (new Date(resolvable) !== \"Invalid Date\") && !isNaN(new Date(resolvable));\n\t}\n}\n\nexport default DateUtils;","\n/**\n * @class NumberUtils\n * @classdesc Various number/math utilities.\n */\nclass NumberUtils {\n\t/**\n\t * Applies a range to a number.\n\t * @param {number} value The value to apply the range to.\n\t * @param {number} min The minimum/lowest number in the range.\n\t * @param {number} max The maximum/highest number in the range.\n\t * @returns {number} \n\t * @memberof NumberUtils \n\t */\n\tstatic applyRange(value, min, max) {\n\t\tvalue = Math.max(min, value);\n\t\t\n\t\tif (max) {\n\t\t\tvalue = Math.min(max, value);\n\t\t}\n\t\t\n\t\treturn value;\n\t}\n\n\t/**\n\t * Checks if a number is in the specified range.\n\t * @param {number} value The value to test. \n\t * @param {number} min The minimum/lowest number in the range.\n\t * @param {number} max The maximum/highest number in the range.\n\t * @returns {boolean}\n\t * @memberof NumberUtils \n\t */\n\tstatic inRange(value, min, max) {\n\t\treturn value >= min && value <= max;\n\t}\n\n\t/**\n\t * Returns the number on the opposite side of the range.\n\t * @param {number} value The value.\n\t * @param {number} min The minimum/lowest number in the range.\n\t * @param {number} max The maximum/highest number in the range.\n\t * @returns {number|null}\n\t * @memberof NumberUtils \n\t */\n\tstatic flipRange(value, min, max) {\n\t\tif (!NumberUtils.inRange(value, min, max)) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn min - value + max;\n\t}\n}\n\nexport default NumberUtils;","\n/**\n * @class ObjectUtils\n * @classdesc Various object utilities.\n */\nclass ObjectUtils {\n\t/**\n\t * Adds a property while avoiding circular properties.\n\t * \n\t * @param {Object} object \n\t * @param {string|number} key \n\t * @param {*} property \n\t * @returns {void}\n\t * @memberof ObjectUtils\n\t */\n\tstatic addPropertyNonCircular(object, key, property) {\n\t\tObject.defineProperty(object, key, {\n\t\t\tset(v) {\n\t\t\t\tproperty = v;\n\t\t\t},\n\t\t\tget() {\n\t\t\t\treturn property;\n\t\t\t}\n\t\t});\n\n\t\treturn;\n\t}\n\n\t/**\n\t * Maps an object by a property.\n\t * @param {Object} object \n\t * @param {string|number} property\n\t * @returns {Array.<*>}\n\t * @memberof ObjectUtils\n\t */\n\tstatic mapProperty(object, property) {\n\t\treturn Object\n\t\t\t.fromEntries(Object\n\t\t\t\t.entries(object)\n\t\t\t\t.map(o => ([o[0], o[1][property]])));\n\t}\n}\n\nexport default ObjectUtils;","import { sentenceSplitString } from \"./regexp\";\n\n/**\n * @class StringUtils\n * @classdesc Various string utilities.\n */\nclass StringUtils {\n\t/**\n\t * Checks if a string is parsable as a JSON object.\n\t * \n\t * @param {string} str\n\t * @returns {boolean}\n\t * @memberof StringUtils\n\t */\n\tstatic isJSON(str) {\n\t\ttry {\n\t\t\tJSON.parse(str);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Limits the string to the specified size.\n\t * @param {string} string\n\t * @param {number} size\n\t * @returns {string} \n\t * @memberof StringUtils\n\t */\n\tstatic limit(string, size, ellipsis = false) {\n\t\tif (ellipsis) {\n\t\t\treturn string.replace(RegExp(`(?<=.{${size - 3}}).+`), \"...\");\n\t\t}\n\t\treturn string.slice(0, size);\n\t}\n\n\n\t/**\n\t * Chops a string into strings of a specified length.\n\t * @param {string} string\n\t * @param {number} size\n\t * @returns {string[]} \n\t * @memberof StringUtils\n\t */\n\tstatic chop(string, size) {\n\t\tlet chopped = [];\n\n\t\twhile (string.length > 0) {\n\t\t\tchopped.push(string.slice(0, size));\n\t\t\tif (string.length - size <= 0) {\n\t\t\t\tstring = 0;\n\t\t\t} else {\n\t\t\t\tstring = string.slice(size);\n\t\t\t}\n\t\t}\n\n\t\treturn chopped;\n\t}\n\n\t/**\n\t * Splits a string into an array containing its sentences.\n\t * @param {string} string \n\t * @returns {Array.<string>}\n\t * @memberof StringUtils\n\t */\n\tstatic splitSentences(string) {\n\t\treturn string.split(sentenceSplitString);\n\t}\n\n\t/**\n\t * Removes the elpisis (...) at the end of a string.\n\t * @param {string} string \n\t * @returns {string}\n\t * @memberof StringUtils\n\t */\n\tstatic removeEndingElipsis(string) {\n\t\treturn string.replace(/\\.\\.\\.$/, \"\");\n\t}\n\n\t/**\n\t * Attempts to evenly space strings.\n\t * (only really works with monospace fonts)\n\t * \n\t * you must put `$SPACE$` where you want the space to be\n\t * \n\t * ##### example:\n\t * ```js\n\t * [ \"key$SPACE$value\", \"examplekey$SPACE$examplevalue\" ]\n\t * ```\n\t * @param  {Array.<string>} strings\n\t * @param  {Object} [options]\n\t * @param  {\"left\"|\"right\"|\"center\"} [options.alignKey=\"left\"] The direction to align the keys.\n\t * \n\t * Default is `\"left\"`\n\t * @param  {number} [options.minimumSpacing=1] The minimum amount of spaces between the key and the value.\n\t * \n\t * Default is `1`.\n\t * @memberof StringUtils\n\t */\n\tstatic evenlySpace(strings, options) {\n\t\toptions = {\n\t\t\talignKey: \"left\",\n\t\t\tminimumSpacing: 1,\n\t\t\t...(options ?? {}),\n\t\t};\n\n\t\tstrings = strings.flat().map(str => {\n\t\t\tconst string = str.split(\"$SPACE$\");\n\n\t\t\tif (string.length > 2) {\n\t\t\t\tthrow new SyntaxError(\"this function currently only supports one spacing per string\");\n\t\t\t}\n\n\t\t\treturn string;\n\t\t});\n\n\t\tlet longestKey = 0, _strings = [];\n\t\tfor (const [key] of strings) {\n\t\t\tlongestKey = Math.max(longestKey, key.length);\n\t\t}\n\n\t\tfor (const _string of strings) {\n\t\t\tlet string = \"\";\n\t\t\tconst difference = longestKey - _string[0].length;\n\t\t\tstring += `${options.alignKey === \"left\" ? \"\" : \" \".repeat(Math.floor(difference / (options.alignKey === \"center\" ? 2 : 1)))}`;\n\t\t\tstring += _string[0];\n\t\t\tstring += `${options.alignKey === \"right\" ? \"\" : \" \".repeat(Math.ceil(difference / (options.alignKey === \"center\" ? 2 : 1)))}`;\n\t\t\tstring += `${\" \".repeat(options.minimumSpacing)}`;\n\t\t\tstring += _string[1];\n\n\t\t\t_strings.push(string);\n\t\t}\n\t\treturn _strings;\n\t}\n}\n\nexport default StringUtils;","\n/**\n * @class DocumentUtils\n * @classdesc Various document utilities.\n */\nclass DocumentUtils {\n\t/**\n\t * @param {Object} options The options for the element.\n\t * @param {string} options.tag The element tag.\n\t * @param {?string} options.id The element id.\n\t * @param {?Element} options.parent The element parent.\n\t * @param {?string} options.class The element class.\n\t * @param {?boolean} options.draggable Whether the element is draggable.\n\t * @returns {Element}\n\t * @memberof DocumentUtils\n\t */\n\tstatic create(options) {\n\t\tif (typeof window !== \"undefined\") {\n\t\t\tthrow new Error(\"This program is not being ran in a browser.\");\n\t\t}\n\n\t\tconst element = document.createElement(options.tag);\n\n\t\tif (options.id) {\n\t\t\telement.id = options.id;\n\t\t}\n\n\t\tif (options.class) {\n\t\t\telement.className = options.class;\n\t\t}\n\n\t\tif (options.draggable) {\n\t\t\telement.draggable = options.draggable;\n\t\t}\n\n\t\tif (options.parent) {\n\t\t\toptions.parent.appendChild(element);\n\t\t}\n\n\t\treturn element;\n\t}\n}\n\nexport default DocumentUtils;","import ArrayUtils from \"./utils/array\";\nimport BooleanUtils from \"./utils/boolean\";\nimport DateUtils from \"./utils/date\";\nimport NumberUtils from \"./utils/number\";\nimport ObjectUtils from \"./utils/object\";\nimport RegExpUtils from \"./utils/regexp\";\nimport StringUtils from \"./utils/string\";\nimport DocumentUtils from \"./utils/document\";\n\n/**\n * @class MeltyUtils\n * @classdesc Various utilities.\n */\nconst MeltyUtils = class MeltyUtils {\n\t/**\n\t * @type {ArrayUtils}\n\t * @memberof MeltyUtils\n\t */\n\tstatic array = ArrayUtils;\n\t/**\n\t * @type {BooleanUtils}\n\t * @memberof MeltyUtils\n\t */\n\tstatic boolean = BooleanUtils;\n\t/**\n\t * @type {DateUtils}\n\t * @memberof MeltyUtils\n\t */\n\tstatic date = DateUtils;\n\t/**\n\t * @type {NumberUtils}\n\t * @memberof MeltyUtils\n\t */\n\tstatic number = NumberUtils;\n\t/**\n\t * @type {ObjectUtils}\n\t * @memberof MeltyUtils\n\t */\n\tstatic object = ObjectUtils;\n\t/**\n\t * @type {RegExpUtils}\n\t * @memberof MeltyUtils\n\t */\n\tstatic regexp = RegExpUtils;\n\t/**\n\t * @type {StringUtils}\n\t * @memberof MeltyUtils\n\t */\n\tstatic string = StringUtils;\n\t/**\n\t * @type {DocumentUtils}\n\t * @memberof MeltyUtils\n\t */\n\tstatic document = DocumentUtils;\n}\n\nexport default MeltyUtils;"],"names":["ArrayUtils","group","array","groupSize","ReferenceError","groups","_iterator","_createForOfIteratorHelperLoose","_step","done","item","value","length","push","groupBy","results","_i","_Object$keys","Object","keys","index","_iterator2","_step2","grouped","_i2","_Object$entries","entries","_Object$entries$_i","mapProperty","property","map","lastIndex","isBooleanString","booleanStringIsTrue","booleanStringIsFalse","sentenceSplitString","RegExpUtils","BooleanUtils","is","resolvable","test","includes","parse","isTrue","isFalse","timeMs","DateUtils","difference","date1","date2","Date","now","valueOf","parseRelativeString","string","yearMatches","exec","monthMatches","dayMatches","hourMatches","minuteMatches","secondMatches","relative","matches","match","parseInt","isNaN","isDate","NumberUtils","applyRange","min","max","Math","inRange","flipRange","ObjectUtils","addPropertyNonCircular","object","key","defineProperty","set","v","get","fromEntries","o","StringUtils","isJSON","str","JSON","e","limit","size","ellipsis","replace","RegExp","slice","chop","chopped","splitSentences","split","removeEndingElipsis","evenlySpace","strings","options","_options","_extends","alignKey","minimumSpacing","flat","SyntaxError","longestKey","_strings","_step$value","_string","repeat","floor","ceil","DocumentUtils","create","window","Error","element","document","createElement","tag","id","className","draggable","parent","appendChild","MeltyUtils","_class","date","number","regexp"],"mappings":"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"}