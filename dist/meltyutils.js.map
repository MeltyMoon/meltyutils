{"version":3,"file":"meltyutils.js","sources":["../src/utils/array.js","../src/utils/regexp.js","../src/utils/boolean.js","../src/utils/date.js","../src/utils/number.js","../src/utils/object.js","../src/utils/string.js","../src/index.umd.js"],"sourcesContent":["export default class ArrayUtils {\n\t/**\n\t * Groups items in an array in groups of a specified size.\n\t * \n\t * Example: group([0, 0, 0, 0, 0, 0], 2) => [[0, 0], [0, 0], [0, 0]].\n\t * @param {Array.<*>} array \n\t * @param {number} groupSize The size of the groups. \n\t * @returns {Array.<Array.<*>>}\n\t */\n\tstatic group(array, groupSize) {\n\t\tif (!groupSize) {\n\t\t\tthrow new ReferenceError(\"Must provide a group size.\");\n\t\t}\n\n\t\tlet groups = [];\n\t\tfor (const item of array) {\n\t\t\tif (groups[groups.length - 1].length >= groupSize) {\n\t\t\t\tgroups.push([]);\n\t\t\t}\n\t\t\tgroups[groups.length - 1].push(item); \n\t\t}\n\n\t\treturn groups;\n\t}\n\n\t/**\n\t * Groups an array by callback checks.\n\t * \n\t * If an item falls under 2 groups, it will go into the group that comes first.\n\t * @param {Array.<*>} array \n\t * @param {Array.<ItemCallback>} groups \n\t */\n\tstatic groupBy(array, groups) {\n\t\tlet results = [];\n\t\t// eslint-disable-next-line no-unused-vars\n\t\tfor (const index of Object.keys(groups)) {\n\t\t\tresults[index] = [];\n\t\t}\n\n\t\tfor (const item of array) {\n\t\t\tlet grouped = false;\n\t\t\tfor (const [index, group] of Object.entries(groups)) {\n\t\t\t\tif (!grouped) {\n\t\t\t\t\tif (group(item) === true) {\n\t\t\t\t\t\tresults[index].push(item);\n\t\t\t\t\t\tgrouped = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn results;\n\t}\n}","const isBooleanString = /^(t(rue)?|f(alse)?|y(es)?|n(o)?|0|1)$/i,\n\tbooleanStringIsTrue = /^(t(rue)?|y(es)?|1)$/i,\n\tbooleanStringIsFalse = /^(f(alse)?|n(o)?|0)$/i;\n\nexport {\n\tisBooleanString,\n\tbooleanStringIsFalse,\n\tbooleanStringIsTrue\n}\n\nexport default class RegExpUtils {\n\t\n}","import { isBooleanString, booleanStringIsTrue, booleanStringIsFalse } from \"./regexp\";\n/**\n * @typedef {boolean|string|0|1} BooleanResolvable\n */\n\nexport default class BooleanUtils {\n\t/**\n\t * Checks if the provided thing is parsable as boolean.\n\t *\n\t * @static\n\t * @param {BooleanResolvable} resolvable \n\t * @return {boolean}\n\t */\n\tstatic is(resolvable) {\n\t\tswitch (typeof resolvable) {\n\t\t\tdefault:\n\t\t\t\treturn false;\n\n\t\t\tcase \"boolean\":\n\t\t\t\treturn true;\n\n\t\t\tcase \"string\":\n\t\t\t\treturn isBooleanString.test(resolvable);\n\n\t\t\tcase \"number\":\n\t\t\t\tif ([0,1].includes( resolvable)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Parses a resolvable boolean.\n\t * Returns null if it is not a boolean.\n\t *\n\t * @param {BooleanResolvable} resolvable \n\t * @return {boolean|null}\n\t */\n\tstatic parse(resolvable) {\n\t\tswitch (resolvable) {\n\t\t\tcase 0:\n\t\t\t\treturn false;\n\t\t\tcase 1:\n\t\t\t\treturn true;\n\t\t}\n\n\t\tswitch (typeof resolvable) {\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t\tcase \"boolean\":\n\t\t\t\treturn resolvable;\n\t\t\tcase \"string\":\n\t\t\t\tif (isBooleanString.test(resolvable)) {\n\t\t\t\t\treturn this.isTrue(resolvable);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if a resolvable boolean is true.\n\t *\n\t * @static\n\t * @param {BooleanResolvable} resolvable \n\t * @return {boolean}\n\t */\n\tstatic isTrue(resolvable) {\n\t\tswitch (typeof resolvable) {\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t\tcase \"boolean\":\n\t\t\t\treturn resolvable;\n\t\t\tcase \"string\":\n\t\t\t\treturn booleanStringIsTrue.test(resolvable);\n\t\t\tcase \"number\":\n\t\t\t\treturn resolvable === 1;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if a resolvable boolean is false.\n\t *\n\t * @static\n\t * @param {BooleanResolvable} resolvable \n\t * @return {boolean}\n\t */\n\tstatic isFalse(resolvable) {\n\t\tswitch (typeof resolvable) {\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t\tcase \"boolean\":\n\t\t\t\treturn !resolvable;\n\t\t\tcase \"string\":\n\t\t\t\treturn booleanStringIsFalse.test(resolvable);\n\t\t\tcase \"number\": \n\t\t\t\treturn resolvable === 0;\n\t\t}\n\t}\n}","const timeMs = [1e3, 6e4, 36e5, 864e5, 2628e6, 31536e6];\n/**\n * @typedef {Date|number} DateResolvable\n */\n\nexport default class DateUtils {\n\t/**\n\t * Gets the difference between two dates. (in milliseconds) \n\t * @param {DateResolvable} date1 The first date. \n\t * @param {?DateResolvable} date2 The second date.\n\t * \n\t * Defaults to the current date if not provided.\n\t * @returns {number}\n\t */\n\tstatic difference(date1, date2 = null) {\n\t\tif (date2 === null) {\n\t\t\tdate1 = date2;\n\t\t\tdate2 = Date.now();\n\t\t}\n\t\t\n\t\tif (date1 instanceof Date) {\n\t\t\tdate1 = date1.valueOf();\n\t\t}\n\n\t\tif (date2 instanceof Date) {\n\t\t\tdate2 = date2.valueOf();\n\t\t}\n\n\t\treturn date1 - date2;\n\t}\n\n\t/**\n\t * Gets the date from the provided relative string.\n\t * @param {string} string \n\t * @returns {number}\n\t */\n\tstatic parseRelativeString(string) {\n\t\tconst yearMatches = /[0-9]+(y|ear(s)?)/gi.exec(string),\n\t\t\tmonthMatches = /[0-9]+(M|month(s)?)/g.exec(string),\n\t\t\tdayMatches = /[0-9]+(d(ay(s)?)?)/gi.exec(string),\n\t\t\thourMatches = /[0-9]+(h(our(s)?)?)/gi.exec(string),\n\t\t\tminuteMatches = /[0-9]+(m(inute(s)?)?)/g.exec(string),\n\t\t\tsecondMatches = /[0-9]+(s(econd(s)?)?)/gi.exec(string);\n\n\t\tlet relative = 0, value;\n\t\tfor (const [index, matches] of Object.entries([secondMatches, minuteMatches, hourMatches, dayMatches, monthMatches, yearMatches])) {\n\t\t\tif ((matches?.length || 0) > 0) {\n\t\t\t\tfor (const match of matches) {\n\t\t\t\t\tvalue = parseInt(match);\n\t\t\t\t\tif (!isNaN(value)) {\n\t\t\t\t\t\trelative += value * timeMs[index];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Date.now() + relative;\n\t}\n\n\n\t/**\n\t * Checks if the resolvable is a date.\n\t * @param {DateResolvable} resolvable\n\t * @returns {boolean} \n\t */\n\tstatic isDate(resolvable) {\n\t\treturn (new Date(resolvable) !== \"Invalid Date\") && !isNaN(new Date(resolvable));\n\t}\n}","export default class NumberUtils {\n\t/**\n\t * Applies a range to a number.\n\t * @param {number} value \n\t * @param {number} min \n\t * @param {number} max\n\t * @returns {number} \n\t */\n\tstatic applyRange(value, min, max) {\n\t\tvalue = Math.max(min, value);\n\t\t\n\t\tif (max) {\n\t\t\tvalue = Math.min(max, value);\n\t\t}\n\t\t\n\t\treturn value;\n\t}\n}","export default class ObjectUtils {\n\t/**\n\t * Adds a property while avoiding circular properties.\n\t * \n\t * @param {Object} object \n\t * @param {string|number} key \n\t * @param {*} property \n\t * @returns {void}\n\t */\n\tstatic addPropertyNonCircular(object, key, property) {\n\t\tObject.defineProperty(object, key, {\n\t\t\tset(v) {\n\t\t\t\tproperty = v;\n\t\t\t},\n\t\t\tget() {\n\t\t\t\treturn property;\n\t\t\t}\n\t\t});\n\n\t\treturn;\n\t}\n\n\t/**\n\t * Maps an object by a property.\n\t * @param {Object} object \n\t * @param {string|number} property\n\t * @returns {Array.<*>}\n\t */\n\tstatic mapProperty(object, property) {\n\t\treturn Object\n\t\t\t.fromEntries(Object\n\t\t\t\t.entries(object)\n\t\t\t\t.map(o => ([o[0], o[1][property]])));\n\t}\n}","export default class StringUtils {\n\t/**\n\t * Checks if a string is parsable as a JSON object.\n\t * \n\t * @param {string} str\n\t * @returns {boolean}\n\t */\n\tstatic isJSON(str) {\n\t\ttry {\n\t\t\tJSON.parse(str);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Limits the string to the specified size.\n\t * @param {string} string\n\t * @param {number} size\n\t * @returns {string} \n\t */\n\tstatic limit(string, size, ellipsis = false) {\n\t\tif (ellipsis) {\n\t\t\treturn string.replace(RegExp(`(?<=.{${size - 3}}).+`), \"...\");\n\t\t}\n\t\treturn string.slice(0, size);\n\t}\n\n\n\t/**\n\t * Chops a string into strings of a specified length.\n\t * @param {string} string\n\t * @param {number} size\n\t * @returns {string[]} \n\t */\n\tstatic chop(string, size) {\n\t\tlet chopped = [];\n\n\t\twhile (string.length > 0) {\n\t\t\tchopped.push(string.slice(0, size));\n\t\t\tif (string.length - size <= 0) {\n\t\t\t\tstring = 0;\n\t\t\t} else {\n\t\t\t\tstring = string.slice(size);\n\t\t\t}\n\t\t}\n\n\t\treturn chopped;\n\t}\n}","import { default as array } from \"./utils/array\";\nimport { default as boolean } from \"./utils/boolean\";\nimport { default as date } from \"./utils/date\";\nimport { default as number } from \"./utils/number\";\nimport { default as object } from \"./utils/object\";\nimport { default as regexp } from \"./utils/regexp\";\nimport { default as string } from \"./utils/string\";\n\nconst MeltyUtils = {\n\tarray,\n\tboolean,\n\tdate,\n\tnumber,\n\tobject,\n\tregexp,\n\tstring\n}\n\nexport default MeltyUtils;"],"names":["ArrayUtils","group","array","groupSize","ReferenceError","groups","_iterator","_createForOfIteratorHelperLoose","_step","done","item","value","length","push","groupBy","results","_i","_Object$keys","Object","keys","index","_iterator2","_step2","grouped","_i2","_Object$entries","entries","_Object$entries$_i","isBooleanString","booleanStringIsTrue","booleanStringIsFalse","RegExpUtils","BooleanUtils","is","resolvable","test","includes","parse","isTrue","isFalse","timeMs","DateUtils","difference","date1","date2","Date","now","valueOf","parseRelativeString","string","yearMatches","exec","monthMatches","dayMatches","hourMatches","minuteMatches","secondMatches","relative","matches","match","parseInt","isNaN","isDate","NumberUtils","applyRange","min","max","Math","ObjectUtils","addPropertyNonCircular","object","key","property","defineProperty","set","v","get","mapProperty","fromEntries","map","o","StringUtils","isJSON","str","JSON","e","limit","size","ellipsis","replace","RegExp","slice","chop","chopped","MeltyUtils","boolean","date","number","regexp"],"mappings":"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"}